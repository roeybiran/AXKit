import Carbon
import Testing
@testable import AXKit

@Suite
struct `AXMenuItemModifiers+CustomStringConvertible Tests` {

  @Test
  func `description, with command only, should be ‚åò`() {
    let mods = "\(AXMenuItemModifiers([]))"
    #expect(mods == "‚åò")
  }

  @Test
  func `description, with option, should be ‚å•‚åò`() {
    let mods = "\(AXMenuItemModifiers([.option]))"
    #expect(mods == "‚å•‚åò")
  }

  @Test
  func `description, with control, should be ‚åÉ‚åò`() {
    let mods = "\(AXMenuItemModifiers([.control]))"
    #expect(mods == "‚åÉ‚åò")
  }

  @Test
  func `description, with shift, should be ‚áß‚åò`() {
    let mods = "\(AXMenuItemModifiers([.shift]))"
    #expect(mods == "‚áß‚åò")
  }

  @Test
  func `description, with control + option + shift + noCommand, should be ‚åÉ‚å•‚áß`() {
    let mods = "\(AXMenuItemModifiers([.shift, .control, .option, .noCommand].shuffled()))"
    #expect(mods == "‚åÉ‚å•‚áß")
  }

  @Test
  func `description, with control + option + noCommand, should be ‚åÉ‚å•`() {
    let mods = "\(AXMenuItemModifiers([.control, .option, .noCommand].shuffled()))"
    #expect(mods == "‚åÉ‚å•")
  }

  @Test
  func `description, with control + shift + noCommand, should be ‚åÉ‚áß`() {
    let mods = "\(AXMenuItemModifiers([.control, .shift, .noCommand].shuffled()))"
    #expect(mods == "‚åÉ‚áß")
  }

  @Test
  func `description, with option + shift + noCommand, should be ‚å•‚áß`() {
    let mods = "\(AXMenuItemModifiers([.option, .shift, .noCommand].shuffled()))"
    #expect(mods == "‚å•‚áß")
  }

  @Test
  func `description, with control + option + shift + command, should be ‚åÉ‚å•‚áß‚åò`() {
    let mods = "\(AXMenuItemModifiers([.shift, .control, .option].shuffled()))"
    #expect(mods == "‚åÉ‚å•‚áß‚åò")
  }

  @Test
  func `description, with single modifier + noCommand, should show single modifier without command`() {
    for item in [(AXMenuItemModifiers.control, "‚åÉ"), (.shift, "‚áß"), (.option, "‚å•")] {
      #expect("\(item.0.union(.noCommand))" == item.1)
    }
  }

  @Test
  func `description, with noCommand only, should be empty`() {
    let mods = "\(AXMenuItemModifiers([.noCommand]))"
    #expect(mods == "")
  }

  @Test
  func `description, with raw value 0x18, should be üåê`() {
    let mods = "\(AXMenuItemModifiers(rawValue: 0x18))"
    #expect(mods == "üåê")
  }
}
